{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","CreateField","Input","type","Textarea","Object","keys","contacts","map","key","p","contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","avatar","isOwner","current","file","length","savePhoto","initialValues","formData","saveProfile","then","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Post","item","img","message","likesCount","MyPosts","React","memo","postsElements","posts","post","id","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","name","component","validate","required","btn","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.81d4a4e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__2QAss\",\"avatar\":\"Profile_avatar__sBZxj\",\"descriptionBlock\":\"Profile_descriptionBlock__2UH2o\",\"contact\":\"Profile_contact__1zTcf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_area\":\"MyPosts_text_area__2k5np\",\"btn\":\"MyPosts_btn__jTdtM\",\"postsBlock\":\"MyPosts_postsBlock__2IsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__zF9vz\",\"img\":\"Post_img__Ru95D\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: any\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status :</b> <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                ></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport {CreateField, Input, Textarea} from '../../Common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport p from \"../Profile.module.css\";\r\nimport s from \"../../Common/FormsControls/FormsControls.module.css\";\r\n\r\nexport type FormDateType = {\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    AboutMe: string\r\n}\r\n//  React.FC<InjectedFormProps<FormDateType>>\r\nconst ProfileDataForm: React.FC<any> = ({ handleSubmit,profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                 <div><button>save</button></div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n                <div>\r\n                    <b>Full name</b>: {CreateField('Full name', 'fullName',\r\n                    [], Input)}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>Looking for a job</b>: {CreateField('', 'lookingForAJob',\r\n                        [], Input, {type: 'checkbox'})}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                    {CreateField('My professional skills', 'lookingForAJobDescription',\r\n                        [], Textarea)}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>About me</b>:\r\n                    {CreateField('About me', 'AboutMe',\r\n                        [], Textarea)}\r\n                </div>\r\n                <div>\r\n                   <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={p.contact}>\r\n                        <b>{key}: {CreateField(key, 'contacts.' + key,\r\n                            [], Input)}</b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from \"react\";\r\nimport p from \"../Profile.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileDataForm, {FormDateType} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: any\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\n\r\nexport default function ProfileInfo(props: any) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.current.file.length) {\r\n            props.savePhoto(e.current.file[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)  ;\r\n        })\r\n     }\r\n    return (\r\n        <div>\r\n            <div className={p.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={p.avatar}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        initialValues={props.profile}\r\n                        // @ts-ignore\r\n                        profile={props.profile}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n\r\n                    />}\r\n\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<any> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Contact: React.FC<any> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={p.contact}><b>{contactTitle}</b> : {contactValue}</div>\r\n    )\r\n}","import React from 'react';\r\nimport p from './Post.module.css'\r\n\r\ntype PostMessage = {\r\n    message: string,\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport default function Post(props: PostMessage) {\r\n    return (\r\n        <div>\r\n            <div className={p.item}>\r\n                <img\r\n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU'\r\n                    className={p.img}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like </span>{props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\n/*type PropsType = {\r\n    posts: Array<PostsType>\r\n    /!*dispatch: (action: ActionTypes) => void*!/\r\n    newPostText: string\r\n    updateNewPostText: (message: string) => void\r\n    addPost: () => void\r\n}*/\r\n\r\n const  MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n       let postsElements =\r\n        props.posts.map(post =>\r\n            <Post key={post.id}\r\n                message={post.message}\r\n                  likesCount={post.likesCount}\r\n                  id={post.id}/>);\r\n\r\n\r\n    let onAddPost = (values: any) => {props.addPost(values.newPostText)}\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default MyPosts\r\n\r\n\r\ntype FormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newPostText' component={Textarea}\r\n            validate={[required,maxLength10]}\r\n            />\r\n\r\n            <br/>\r\n            <button\r\n                className={s.btn}>Send\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n","import React from 'react';\r\n\r\nimport {addPostActionCreator} from \"../../../Redux/ProfileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {dialogPageType} from \"../../../Redux/DialogsReduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n/*\r\ntype PropsType = {\r\n    store: StoreType\r\n\r\n posts: Array<PostsType>\r\n dispatch: (action: ActionTypes) => void\r\n newPostText: string\r\nupdateNewPostText: (message: string) => void\r\naddPost: (message: string) => void*/\r\n/*export default function MyPostsContainer(/!*props: PropsType*!/) {\r\n\r\n\r\n    return (\r\n\r\n        <StoreContext.Consumer>\r\n            {\r\n            (store) => {\r\n                let state = store.getState()\r\n                let addPost = () => {\r\n                  store.dispatch(addPostActionCreator());\r\n                }\r\n\r\n                const onPostChange = (text: string) => {\r\n                   store.dispatch(updateNewPostTextActionCreator(text))\r\n                }\r\n\r\n           return     <MyPosts\r\n                    updateNewPostText={onPostChange}\r\n                    addPost={addPost}\r\n                    posts={state.profilePage.posts}\r\n                    newPostText={state.profilePage.newPostText}/>\r\n            }\r\n        }\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n   /* newPostText: string*/\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n   /* updateNewPostText: (text: string) => void*/\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n       /* newPostText: state.profilePage.newPostText*/\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch ): mapDispatchToPropsType => {\r\n    return {\r\n       /* updateNewPostText: (text: string) => {\r\n            dispatch((text))\r\n        },*/\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n/*  profilePage: ProfilePageType\r\n  posts: Array<PostsType>\r\n  updateNewPostText: (message: string) => void\r\n  addPost: (message: string) => void\r\n  dispatch: (action: ActionTypes) => void*/\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    updateStatus: any\r\n    profile: any\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nexport default function Profile(props: any) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../Redux/ProfileReduser\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string | number | null\r\n  }\r\n\r\n// @ts-ignore\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId: string | number | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: any\r\n    getStatus: any\r\n    updateStatus: any\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n    //  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}