{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","h","dialog","active","to","id","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","messagesElements","messages","dialogsItem","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCKjK,SAASC,EAAWC,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAjC,cAAuCN,EAAMO,UCA1C,SAASC,EAAQR,GAC5B,OACI,qBAAKC,UAAWC,IAAEO,QAAlB,SACKT,EAAMS,QAAQA,U,qCCqDrBC,EAAYC,YAAiB,IAgB7BC,EACFC,YAAoB,CAChBC,KAAM,wBADVD,EAhB0D,SAACb,GAC3D,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBH,KAAK,iBAAiBe,YAAa,yBAE9C,8BACI,mDAWDC,EAhE4B,SAACvB,GAIxC,IAAIwB,EAAkBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAxB,GAAM,OAAI,cAACJ,EAAD,CAAYQ,KAAMJ,EAAOI,KAAMD,GAAIH,EAAOG,QACpGsB,EAAmB5B,EAAMyB,YAAYI,SAASF,KAAI,SAAAlB,GAAO,OAAI,cAACD,EAAD,CAASC,QAASA,OAmBnF,OACI,sBAAKR,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE4B,YAAlB,SACKN,IAGL,qBAAKvB,UAAWC,IAAE2B,SAAlB,SACKD,IAEL,8BACI,cAAChB,EAAD,CAAqBG,SAhBb,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,yB,sCChC7BC,EAA6B,SAACC,GAAD,MAA6C,CAC1EC,OAAQD,EAAME,KAAKD,SCuELE,sBACdC,aAjBkB,SAACJ,GACnB,MAAO,CACHV,YAAaU,EAAMV,gBAGF,SAACe,GACtB,MAAO,CACHR,YAAa,SAACC,GACVO,EAASC,YAAmBR,UD5DjC,SAA+BS,GAclC,OAHsCH,YAAQL,EAARK,EATtC,SAA2BvC,GAA2B,IAE7CoC,EAAwBpC,EAAxBoC,OAAWO,EAFiC,YAEpB3C,EAFoB,YAIjD,OAAKoC,EACE,cAACM,EAAD,eAAeC,IADF,cAAC,IAAD,CAAUtC,GAAG,gBC8DvBiC,CAGhBf","file":"static/js/4.d33c8c91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__lZ0MM\",\"dialogsItem\":\"Dialogs_dialogsItem__3_tNJ\",\"active\":\"Dialogs_active__1laJr\",\"messages\":\"Dialogs_messages__2GK0A\",\"message\":\"Dialogs_message__3BWVe\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport h from './../Dialogs.module.css'\r\n\r\n\r\n\r\nexport default function DialogItem(props: any) {\r\n    return (\r\n        <div className={h.dialog + ' ' + h.active}>\r\n            <NavLink to={'/dialogs/' + props.id}> {props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport { MessageType } from \"../../../Redux/DialogsReduser\";\r\n\r\nimport h from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: MessageType\r\n}\r\n\r\nexport default function Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={h.message}>\r\n            {props.message.message}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport h from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\r\n\r\n\r\n\r\n/*\r\ntype DialogsPropsType = {\r\n    sendMessage: () => void\r\n    dialogsPage: DialogPageType\r\n    updateNewMessageBody: (message: string) => void\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n    dispatch: (action: ActionTypes) => void*/\r\n\r\n\r\nconst Dialogs:React.FC<DialogsPropsType> = (props) => {\r\n\r\n    /* let state = props.dialogsPage*/\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n    let messagesElements = props.dialogsPage.messages.map(message => <Message message={message}/>)\r\n    // let newMessageBody = props.dialogsPage.newMessageBody;\r\n\r\n    /* let newMessage = React.createRef<HTMLTextAreaElement>()*/\r\n    /* let onSendMessageClick = () => {\r\n         props.sendMessage()\r\n     }*/\r\n    /*let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.currentTarget.value\r\n        props.updateNewMessageBody(body)\r\n        /!*props.dispatch(updateNewMessageBodyCreator(body))*!/\r\n    }*/\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    /*  if (!props.isAuth ) return <Redirect to={'./login'}/>*/\r\n\r\n    return (\r\n        <div className={h.dialogs}>\r\n            <div className={h.dialogsItem}>\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={h.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength = maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       name='newMessageBody' placeholder={'enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button> Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux =\r\n    reduxForm<FormType>({\r\n        form: 'dialogAddMessageForm'\r\n    })(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { ComponentType } from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n      isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>)   {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    let  ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport {dialogPageType, sendMessageCreator} from \"../../Redux/DialogsReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {withAuthRedirect} from \"../Hoc/withAuthRedirect\";\r\n\r\n\r\n/*type DialogsPropsType = {\r\n    store: StoreType*/\r\n/*dialogs: Array<DialogType>\r\nmessages: Array<MessageType>\r\nnewMessageBody: string\r\ndispatch: (action: ActionTypes) => void*/\r\n/*export default function DialogsContainer(/!*props: DialogsPropsType*!/) {\r\n\r\n\r\n\r\n    /!*  let dialogsElements = props.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n      let messagesElements = props.messages.map(message => <Message message={message}/>)\r\n      let newMessageBody = props.newMessageBody;*!/\r\n\r\n    /!* let newMessage = React.createRef<HTMLTextAreaElement>()*!/\r\n\r\n\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        {\r\n        (store) => {\r\n            let state = store.getState().dialogPage\r\n            let onSendMessageClick = () => {\r\n                store.dispatch(sendMessageCreator())\r\n            }\r\n\r\n            let onNewMessageChange = (body: string) => {\r\n                store.dispatch(updateNewMessageBodyCreator(body))\r\n\r\n            }\r\n            return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n                            sendMessage={onSendMessageClick}\r\n                            dialogsPage={state}\r\n            />;\r\n        }\r\n    }\r\n    </StoreContext.Consumer>\r\n}*/\r\n\r\n/*export type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n   /!* newMessageBody: string*!/\r\n}*/\r\ntype mapStateToPropsType = {\r\n    dialogsPage: dialogPageType\r\n   /* newMessageBody: string*/\r\n}\r\ntype mapDispatchToPropsType = {\r\n   /* updateNewMessageBody: (body: string) => void*/\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }/*\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        }*/\r\n    }\r\n}\r\n\r\nexport default    compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n"],"sourceRoot":""}