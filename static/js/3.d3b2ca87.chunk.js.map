{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","p","descriptionBlock","src","photos","large","avatar","Preloader","Post","item","img","message","likesCount","MyPosts","React","memo","postsElements","posts","map","post","id","s","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","btn","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","upateStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d3b2ca87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__2QAss\",\"avatar\":\"Profile_avatar__sBZxj\",\"descriptionBlock\":\"Profile_descriptionBlock__2UH2o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_area\":\"MyPosts_text_area__2k5np\",\"btn\":\"MyPosts_btn__jTdtM\",\"postsBlock\":\"MyPosts_postsBlock__2IsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__zF9vz\",\"img\":\"Post_img__Ru95D\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: any\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>Status:\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                ></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport p from \"../Profile.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: any\r\n}\r\n\r\nexport default function ProfileInfo(props: any) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={p.descriptionBlock}>\r\n                <img src={props.profile.photos.large} className={p.avatar}/>\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport p from './Post.module.css'\r\n\r\ntype PostMessage = {\r\n    message: string,\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport default function Post(props: PostMessage) {\r\n    return (\r\n        <div>\r\n            <div className={p.item}>\r\n                <img\r\n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU'\r\n                    className={p.img}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like </span>{props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\n/*type PropsType = {\r\n    posts: Array<PostsType>\r\n    /!*dispatch: (action: ActionTypes) => void*!/\r\n    newPostText: string\r\n    updateNewPostText: (message: string) => void\r\n    addPost: () => void\r\n}*/\r\n\r\n const  MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n       let postsElements =\r\n        props.posts.map(post =>\r\n            <Post message={post.message}\r\n                  likesCount={post.likesCount}\r\n                  id={post.id}/>);\r\n\r\n\r\n    let onAddPost = (values: any) => {props.addPost(values.newPostText)}\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default MyPosts\r\n\r\n\r\ntype FormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newPostText' component={Textarea}\r\n            validate={[required,maxLength10]}\r\n            />\r\n\r\n            <br/>\r\n            <button\r\n                className={s.btn}>Send\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n","import React from 'react';\r\n\r\nimport {addPostActionCreator} from \"../../../Redux/ProfileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {dialogPageType} from \"../../../Redux/DialogsReduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n/*\r\ntype PropsType = {\r\n    store: StoreType\r\n\r\n posts: Array<PostsType>\r\n dispatch: (action: ActionTypes) => void\r\n newPostText: string\r\nupdateNewPostText: (message: string) => void\r\naddPost: (message: string) => void*/\r\n/*export default function MyPostsContainer(/!*props: PropsType*!/) {\r\n\r\n\r\n    return (\r\n\r\n        <StoreContext.Consumer>\r\n            {\r\n            (store) => {\r\n                let state = store.getState()\r\n                let addPost = () => {\r\n                  store.dispatch(addPostActionCreator());\r\n                }\r\n\r\n                const onPostChange = (text: string) => {\r\n                   store.dispatch(updateNewPostTextActionCreator(text))\r\n                }\r\n\r\n           return     <MyPosts\r\n                    updateNewPostText={onPostChange}\r\n                    addPost={addPost}\r\n                    posts={state.profilePage.posts}\r\n                    newPostText={state.profilePage.newPostText}/>\r\n            }\r\n        }\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n   /* newPostText: string*/\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n   /* updateNewPostText: (text: string) => void*/\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n       /* newPostText: state.profilePage.newPostText*/\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch ): mapDispatchToPropsType => {\r\n    return {\r\n       /* updateNewPostText: (text: string) => {\r\n            dispatch((text))\r\n        },*/\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\n  /*  profilePage: ProfilePageType\r\n    posts: Array<PostsType>\r\n    updateNewPostText: (message: string) => void\r\n    addPost: (message: string) => void\r\n    dispatch: (action: ActionTypes) => void*/\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    updateStatus: any\r\n    profile: any\r\n}\r\n\r\nexport default function Profile(props: any) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n                 />\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../Redux/ProfileReduser\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string | number | null\r\n}\r\n\r\n// @ts-ignore\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId:  string | number | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: any\r\n    getStatus: any\r\n    updateStatus: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         upateStatus={this.props.updateStatus}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n  //  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}