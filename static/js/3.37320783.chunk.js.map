{"version":3,"sources":["components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","statusTitle","statusDescription","onDoubleClick","styleCommon","input","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","titlesForm","button","error","formSummaryError","CreateField","Input","type","Textarea","Object","keys","profile","contacts","map","key","p","contact","ProfileInfo","Preloader","descriptionBlock","avatarContainer","src","photos","large","userPhoto","avatar","isOwner","inputFile","files","target","length","savePhoto","infoBlock","styleInfo","headerProfile","fullName","border","detailedInfo","titleDetailedInfo","initialValues","formData","saveProfile","then","goToEditMode","ProfileData","styles","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","Contact","Post","item","img","message","like","likesCount","MyPosts","React","memo","postsElements","posts","post","id","postsBlock","title","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","formWrapper","Field","textarea","name","component","validate","required","styleBtn","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","CarouselPage","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.37320783.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"Profile_descriptionBlock__2OyRN\",\"inputFile\":\"Profile_inputFile__33rtd\",\"avatarContainer\":\"Profile_avatarContainer__d5f-f\",\"avatar\":\"Profile_avatar__I9_Mn\",\"detailedInfo\":\"Profile_detailedInfo__3VFgu\",\"titleDetailedInfo\":\"Profile_titleDetailedInfo__30vWj\",\"infoBlock\":\"Profile_infoBlock__3zj5B\",\"contact\":\"Profile_contact__aAPyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerProfile\":\"ProfileInfo_headerProfile__1UJZK\",\"fullName\":\"ProfileInfo_fullName__EgZqp\",\"status\":\"ProfileInfo_status__n6rSO\",\"statusTitle\":\"ProfileInfo_statusTitle__-YRrs\",\"statusDescription\":\"ProfileInfo_statusDescription__3zFFT\",\"avatar\":\"ProfileInfo_avatar__U8AEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1uoA-\",\"title\":\"MyPosts_title__rT7iN\",\"formWrapper\":\"MyPosts_formWrapper__Lw-0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__33mi-\",\"img\":\"Post_img__1ncUv\",\"like\":\"Post_like__25eE2\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport styleCommon from '../../Common/SCSS/input.module.scss'\r\nimport style from './ProfileInfo.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: any\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={style.status}>\r\n            {!editMode &&\r\n            <div>\r\n                <b className={style.statusTitle}>Status :</b> <span\r\n                className={style.statusDescription}\r\n                onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    className={styleCommon.input}\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                ></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React, {FormEvent} from \"react\";\r\nimport {CreateField, Input, Textarea} from '../../Common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styleCommon from '../../Common/SCSS/button.module.scss'\r\nimport p from \"../Profile.module.scss\";\r\nimport style from \"../../Common/FormsControls/FormsControls.module.scss\";\r\nimport {profileType} from \"../../../Redux/ProfileReduser\";\r\n\r\ntype ProfileDataForm = {\r\n    handleSubmit:  (event: React.FormEvent<HTMLFormElement>) => void\r\n    error: string\r\n    profile: profileType\r\n}\r\nexport type FormDateType = {\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    AboutMe: string\r\n  }\r\n\r\n//{handleSubmit, profile, error}\r\n//  React.FC<InjectedFormProps<FormDateType>>\r\nconst ProfileDataForm = (props: any) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={style.titlesForm}>\r\n                <button className={styleCommon.button}>save</button>\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n            <div className={style.titlesForm}>\r\n                <p>Full name</p>: {CreateField('Full name', 'fullName',\r\n                [], Input)}\r\n            </div>\r\n\r\n            <div className={style.titlesForm}>\r\n                <p>Looking for a job</p>: {CreateField('', 'lookingForAJob',\r\n                [], Input, {type: 'checkbox'})}\r\n            </div>\r\n\r\n            <div className={style.titlesForm}>\r\n                <p>My professional skills</p>:\r\n                {CreateField('My professional skills', 'lookingForAJobDescription',\r\n                    [], Textarea)}\r\n            </div>\r\n\r\n            <div className={style.titlesForm}>\r\n                <p>About me</p>:\r\n                {CreateField('About me', 'AboutMe',\r\n                    [], Textarea)}\r\n            </div>\r\n            <div >\r\n                <p>Contacts</p>: {Object.keys(props.profile.contacts).map((key: string) => {\r\n                return <div key={key} className={p.contact}>\r\n                    <p>{key}: {CreateField(key, 'contacts.' + key,\r\n                        [], Input)}</p>\r\n                </div>\r\n            })}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport styleCommon from '../../Common/SCSS/button.module.scss';\r\nimport styles from '../../Common/FormsControls/FormsControls.module.scss';\r\nimport style from \"../Profile.module.scss\";\r\nimport styleInfo from './ProfileInfo.module.scss'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileDataForm, {FormDateType} from \"./ProfileDataForm\";\r\nimport {ContactType, profileType} from \"../../../Redux/ProfileReduser\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: boolean\r\n    isOwner: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: (formData: FormDateType) => any\r\n}\r\n\r\n\r\nexport default function ProfileInfo(props: ProfileInfoPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files;\r\n        if (files && files.length) {\r\n            props.savePhoto(files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={style.descriptionBlock}>\r\n\r\n\r\n            <div className={style.avatarContainer}>\r\n                <img src={props.profile.photos.large || userPhoto}\r\n                     className={style.avatar}/>\r\n                {\r\n                    props.isOwner && <input\r\n                        className={style.inputFile}\r\n                        type={'file'}\r\n                        onChange={onMainPhotoSelected}\r\n                    />}\r\n            </div>\r\n\r\n            <div className={style.infoBlock}>\r\n                <div className={styleInfo.headerProfile}>\r\n                <span className={styleInfo.fullName}>\r\n                {props.profile.fullName}\r\n                </span>\r\n                    <ProfileStatusWithHooks\r\n                        status={props.status}\r\n                        updateStatus={props.updateStatus}\r\n                    />\r\n                </div>\r\n                <hr style={{border: \" 1px solid gold \"}}/>\r\n\r\n                <div className={style.detailedInfo}>\r\n                    <h3 className={style.titleDetailedInfo} >\r\n                        Detailed information</h3>\r\n                    {editMode\r\n                        ? <ProfileDataForm\r\n                            initialValues={props.profile}\r\n                            // @ts-ignore\r\n                            profile={props.profile}\r\n                            onSubmit={onSubmit}\r\n                        />\r\n                        : <ProfileData\r\n                            goToEditMode={() => {\r\n                                setEditMode(true)\r\n                            }}\r\n                            profile={props.profile}\r\n                            isOwner={props.isOwner}\r\n\r\n                        />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n\r\n            <div className={styles.titlesForm}>\r\n                <p>Full name</p>: {profile.fullName}\r\n            </div>\r\n\r\n            <div className={styles.titlesForm}>\r\n                <p>Looking for a job</p>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div className={styles.titlesForm}>\r\n                <p>My professional skills</p>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n\r\n            <div className={styles.titlesForm}>\r\n                <p>About me</p>: {profile ? 'yes' : 'no'}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <p>Contacts :</p> {Object.keys(profile.contacts).map((key: any) => {\r\n                return <Contact key={key}\r\n                                contactTitle={key}\r\n                                contactValue={profile.contacts[key]}\r\n                />\r\n            })}\r\n            </div>\r\n\r\n            {isOwner && <div>\r\n                <button\r\n                    className={styleCommon.button}\r\n                    onClick={goToEditMode}\r\n                >Edit\r\n                </button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactTypeProps = {\r\n    contactTitle: string\r\n    contactValue: ContactType\r\n}\r\nconst Contact: React.FC<ContactTypeProps> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b> : {contactValue}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Post.module.scss'\r\n\r\ntype PostMessage = {\r\n    message: string,\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport default function Post(props: PostMessage) {\r\n    return (\r\n        <div>\r\n            <div className={style.item}>\r\n                <img\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/8/87/Avatar_poe84it.png\"\r\n                className={style.img}/>\r\n                {props.message}\r\n                <div className={style.like}>\r\n                    <span >like </span>{props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport style from './MyPosts.module.scss'\r\nimport styleCommon from '../../Common/SCSS/input.module.scss';\r\nimport styleBtn from '../../Common/SCSS/button.module.scss';\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements =\r\n        props.posts.map(post =>\r\n            <Post key={post.id}\r\n                  message={post.message}\r\n                  likesCount={post.likesCount}\r\n                  id={post.id}/>);\r\n\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h3 className={style.title}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default MyPosts\r\n\r\n\r\ntype FormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form\r\n            className={style.formWrapper}\r\n            onSubmit={props.handleSubmit}>\r\n            <Field\r\n                className={styleCommon.textarea}\r\n                name='newPostText' component={Textarea}\r\n                validate={[required, maxLength10]}\r\n            />\r\n\r\n\r\n            <button\r\n                className={styleBtn.button}>Send\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../Redux/ProfileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch ): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../Redux/ProfileReduser\";\r\nimport CarouselPage from \"../carousel/CarouselPage\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    updateStatus: boolean\r\n    profile: profileType\r\n    isOwner: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: any\r\n}\r\n\r\nexport default function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <CarouselPage/>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {getStatus, getUserProfile, profileType, savePhoto, saveProfile, updateStatus} from \"../../Redux/ProfileReduser\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n  }\r\n\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    authorizedUserId: string | number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null ) => void\r\n    getStatus: (userId: number | null)=> void\r\n    updateStatus: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n    //  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}