{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","error","className","s","formSummaryError","CreateField","Input","type","Textarea","Object","keys","profile","contacts","map","key","p","contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","avatar","isOwner","files","target","length","savePhoto","initialValues","formData","saveProfile","then","goToEditMode","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","Contact","Post","item","img","message","like","likesCount","MyPosts","React","memo","postsElements","posts","post","id","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","textarea","name","component","validate","required","btn","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,OAAS,wBAAwB,iBAAmB,kCAAkC,QAAU,2B,oBCA3JD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,IAAM,qBAAqB,WAAa,8B,oBCA/FD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,IAAM,kBAAkB,KAAO,qB,4ICmD5DC,EA7CkD,SAACC,GAAW,IAAD,EAG1CC,oBAAS,GAHiC,mBAGnEC,EAHmE,KAGzDC,EAHyD,OAI9CF,mBAASD,EAAMI,QAJ+B,mBAInEA,EAJmE,KAI3DC,EAJ2D,KAMxEC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OAEI,iCACMF,GACF,gCACI,yCADJ,IACoB,sBAAMK,cAhBT,kBAAMJ,GAAY,IAgBf,SAAwCH,EAAMI,QAAU,eAG3EF,GACD,8BACI,uBACIM,SAfO,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAedC,WAAW,EACXC,OAtBW,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAqBPO,MAAOP,U,2CCuBZW,EAFkBC,YAAU,CAACC,KAAM,gBAAjBD,EA3CT,SAAChB,GAGrB,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,4CAEHnB,EAAMoB,OAAS,qBAAKC,UAAWC,IAAEC,iBAAlB,SAAqCvB,EAAMoB,QAC3D,gCACI,0CADJ,KACuBI,YAAY,YAAa,WAC5C,GAAIC,QAGR,gCACI,kDADJ,KAC+BD,YAAY,GAAI,iBAC3C,GAAIC,IAAO,CAACC,KAAM,gBAGtB,gCACI,uDADJ,IAEKF,YAAY,yBAA0B,4BACnC,GAAIG,QAGZ,gCACI,yCADJ,IAEKH,YAAY,WAAY,UACrB,GAAIG,QAEZ,gCACI,yCADJ,KACsBC,OAAOC,KAAK7B,EAAM8B,QAAQC,UAAUC,KAAI,SAACC,GAC3D,OAAO,qBAAeZ,UAAWa,IAAEC,QAA5B,SACH,8BAAIF,EAAJ,KAAWT,YAAYS,EAAK,YAAcA,EACtC,GAAIR,SAFKQ,eClClB,SAASG,EAAYpC,GAA8B,IAAD,EAE/BC,oBAAS,GAFsB,mBAExDC,EAFwD,KAE9CC,EAF8C,KAG7D,IAAKH,EAAM8B,QACP,OAAO,cAACO,EAAA,EAAD,IAiBX,OACI,8BACI,sBAAKhB,UAAWa,IAAEI,iBAAlB,UACI,qBAAKC,IAAKvC,EAAM8B,QAAQU,OAAOC,OAASC,IAAWrB,UAAWa,IAAES,SAC/D3C,EAAM4C,SAAW,uBAAOlB,KAAM,OAAQlB,SAnBvB,SAACC,GACzB,IAAMoC,EAAQpC,EAAEqC,OAAOD,MAGnBA,GAASA,EAAME,QACf/C,EAAMgD,UAAUH,EAAM,OAgBjB3C,EACK,cAAC,EAAD,CACE+C,cAAejD,EAAM8B,QAErBA,QAAS9B,EAAM8B,QACfZ,SAlBH,SAACgC,GACdlD,EAAMmD,YAAYD,GAAUE,MAAK,WAC7BjD,GAAY,SAkBF,cAAC,EAAD,CACEkD,aAAc,WACVlD,GAAY,IAEhB2B,QAAS9B,EAAM8B,QACfc,QAAS5C,EAAM4C,UAKvB,cAAC,EAAD,CACIxC,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,oBAaxC,IAAMwC,EAAyC,SAAC,GAAsC,IAArCxB,EAAoC,EAApCA,QAASc,EAA2B,EAA3BA,QAASS,EAAkB,EAAlBA,aAC/D,OACI,gCAEI,gCACI,0CADJ,KACuBvB,EAAQyB,YAG/B,gCACI,kDADJ,KAC+BzB,EAAQ0B,eAAiB,MAAQ,QAE/D1B,EAAQ0B,gBACT,gCACI,uDADJ,KACoC1B,EAAQ2B,6BAI5C,gCACI,yCADJ,KACsB3B,EAAU,MAAQ,QAKxC,gCACI,yCADJ,KACsBF,OAAOC,KAAKC,EAAQC,UAAUC,KAAI,SAACC,GACrD,OAAO,cAAC,EAAD,CAAmByB,aAAczB,EAAK0B,aAAc7B,EAAQC,SAASE,IAAvDA,SAGxBW,GAAW,8BACR,wBAAQgB,QAASP,EAAjB,wBAUVQ,EAAsC,SAAC,GAAkC,IAAjCH,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACxD,OACI,sBAAKtC,UAAWa,IAAEC,QAAlB,UAA2B,4BAAIuB,IAA/B,MAAoDC,M,4CC9G7C,SAASG,EAAK9D,GACzB,OACI,8BACI,sBAAKqB,UAAWa,IAAE6B,KAAlB,UACI,qBACIxB,IAAI,yEACRlB,UAAWa,IAAE8B,MACZhE,EAAMiE,QACP,sBAAK5C,UAAWa,IAAEgC,KAAlB,UACI,yCAAoBlE,EAAMmE,mB,oBCsB/BC,EAvBGC,IAAMC,MAAK,SAACtE,GAEvB,IAAIuE,EACHvE,EAAMwE,MAAMxC,KAAI,SAAAyC,GAAI,OAChB,cAACX,EAAD,CACIG,QAASQ,EAAKR,QACZE,WAAYM,EAAKN,WACjBO,GAAID,EAAKC,IAHJD,EAAKC,OASxB,OACI,sBAAKrD,UAAWC,IAAEqD,WAAlB,UACI,0CACA,cAACC,EAAD,CAAqB1D,SANb,SAAC2D,GAAiB7E,EAAM8E,QAAQD,EAAOE,gBAO9CR,QAaPS,EAAeC,YAAiB,IAmBhCL,EAAsB5D,YAAoB,CAC5CC,KAAM,yBADkBD,EAjBkC,SAAChB,GAC3D,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,cAAC+D,EAAA,EAAD,CACI7D,UAAWC,IAAE6D,SACbC,KAAK,cAAcC,UAAW1D,IAClC2D,SAAU,CAACC,IAASP,KAGpB,uBACA,wBACI3D,UAAWC,IAAEkE,IADjB,wB,QCoBGC,EADUC,aAjBD,SAACC,GACrB,MAAO,CACHnB,MAAOmB,EAAMC,YAAYpB,UAKN,SAACqB,GACxB,MAAO,CAIHf,QAAS,SAACC,GACNc,EAASC,YAAqBf,QAIjBW,CAA6CtB,GC/DvD,SAAS2B,EAAQ/F,GAC5B,OACI,gCACI,cAACoC,EAAD,CACIe,YAAanD,EAAMmD,YACnBH,UAAWhD,EAAMgD,UACjBJ,QAAS5C,EAAM4C,QACfd,QAAS9B,EAAM8B,QACf1B,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,eACxB,cAAC,EAAD,O,mBCQNkF,E,+KAGE,IAAIC,EAASC,KAAKlG,MAAMmG,MAAMC,OAAOH,OAChCA,IACDA,EAAM,UAAMC,KAAKlG,MAAMqG,oBAEnBH,KAAKlG,MAAMsG,QAAQC,KAAK,UAGhCL,KAAKlG,MAAMwG,gBAAgBP,GAC3BC,KAAKlG,MAAMyG,WAAWR,K,0CAItBC,KAAKQ,mB,yCAGUC,EAAgCC,EAAyBC,GACpEX,KAAKlG,MAAMmG,MAAMC,OAAOH,SAAWU,EAAUR,MAAMC,OAAOH,QAC1DC,KAAKQ,mB,+BAKT,OACI,8BACI,cAACX,EAAD,2BAAaG,KAAKlG,OAAlB,IACS4C,SAAUsD,KAAKlG,MAAMmG,MAAMC,OAAOH,OAClCnE,QAASoE,KAAKlG,MAAM8B,QACpB1B,OAAQ8F,KAAKlG,MAAMI,OACnBU,aAAcoF,KAAKlG,MAAMc,aACzBkC,UAAWkD,KAAKlG,MAAMgD,mB,GAhChBqB,IAAMyC,WAkDtBC,sBACXrB,aAXkB,SAACC,GAAD,MAA6C,CAC/D7D,QAAS6D,EAAMC,YAAY9D,QAC3B1B,OAAQuF,EAAMC,YAAYxF,OAC1BiG,iBAAkBV,EAAMqB,KAAKf,OAC7BgB,OAAQtB,EAAMqB,KAAKC,UAOM,CAACT,mBAAgBC,cAAW3F,iBAAckC,cAAWG,kBAC9E+D,IAFWH,CAIbf","file":"static/js/3.06295c1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__2QAss\",\"avatar\":\"Profile_avatar__sBZxj\",\"descriptionBlock\":\"Profile_descriptionBlock__2UH2o\",\"contact\":\"Profile_contact__1zTcf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"MyPosts_textarea__183te\",\"btn\":\"MyPosts_btn__jTdtM\",\"postsBlock\":\"MyPosts_postsBlock__2IsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__zF9vz\",\"img\":\"Post_img__Ru95D\",\"like\":\"Post_like__3CHUQ\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: any\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status :</b> <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                ></input>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React, {FormEvent} from \"react\";\r\nimport {CreateField, Input, Textarea} from '../../Common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport p from \"../Profile.module.css\";\r\nimport s from \"../../Common/FormsControls/FormsControls.module.css\";\r\nimport {profileType} from \"../../../Redux/ProfileReduser\";\r\n\r\ntype ProfileDataForm = {\r\n    handleSubmit:  (event: React.FormEvent<HTMLFormElement>) => void\r\n    error: string\r\n    profile: profileType\r\n}\r\nexport type FormDateType = {\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    AboutMe: string\r\n  }\r\n\r\n//{handleSubmit, profile, error}\r\n//  React.FC<InjectedFormProps<FormDateType>>\r\nconst ProfileDataForm = (props: any) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <b>Full name</b>: {CreateField('Full name', 'fullName',\r\n                [], Input)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: {CreateField('', 'lookingForAJob',\r\n                [], Input, {type: 'checkbox'})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {CreateField('My professional skills', 'lookingForAJobDescription',\r\n                    [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>:\r\n                {CreateField('About me', 'AboutMe',\r\n                    [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map((key: string) => {\r\n                return <div key={key} className={p.contact}>\r\n                    <b>{key}: {CreateField(key, 'contacts.' + key,\r\n                        [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport p from \"../Profile.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport ProfileDataForm, {FormDateType} from \"./ProfileDataForm\";\r\nimport {ContactType, profileType} from \"../../../Redux/ProfileReduser\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: boolean\r\n    isOwner: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: (formData: FormDateType) => any\r\n}\r\n\r\n\r\nexport default function ProfileInfo(props: ProfileInfoPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files;\r\n\r\n\r\n        if (files && files.length) {\r\n            props.savePhoto(files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={p.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={p.avatar}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        initialValues={props.profile}\r\n                        // @ts-ignore\r\n                        profile={props.profile}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n\r\n                    />}\r\n\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <b>About me</b>: {profile ? 'yes' : 'no'}\r\n            </div>\r\n\r\n\r\n\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map((key: any) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactTypeProps = {\r\n    contactTitle: string\r\n    contactValue: ContactType\r\n}\r\nconst Contact: React.FC<ContactTypeProps> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={p.contact}><b>{contactTitle}</b> : {contactValue}</div>\r\n    )\r\n}","import React from 'react';\r\nimport p from './Post.module.css'\r\n\r\ntype PostMessage = {\r\n    message: string,\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport default function Post(props: PostMessage) {\r\n    return (\r\n        <div>\r\n            <div className={p.item}>\r\n                <img\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/8/87/Avatar_poe84it.png\"\r\n                className={p.img}/>\r\n                {props.message}\r\n                <div className={p.like}>\r\n                    <span >like </span>{props.likesCount}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\n\r\n/*type PropsType = {\r\n    posts: Array<PostsType>\r\n    /!*dispatch: (action: ActionTypes) => void*!/\r\n    newPostText: string\r\n    updateNewPostText: (message: string) => void\r\n    addPost: () => void\r\n}*/\r\n\r\n const  MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n       let postsElements =\r\n        props.posts.map(post =>\r\n            <Post key={post.id}\r\n                message={post.message}\r\n                  likesCount={post.likesCount}\r\n                  id={post.id}/>);\r\n\r\n\r\n    let onAddPost = (values: any) => {props.addPost(values.newPostText)}\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default MyPosts\r\n\r\n\r\ntype FormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                className={s.textarea}\r\n                name='newPostText' component={Textarea}\r\n            validate={[required,maxLength10]}\r\n            />\r\n\r\n            <br/>\r\n            <button\r\n                className={s.btn}>Send\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n","import React from 'react';\r\n\r\nimport {addPostActionCreator} from \"../../../Redux/ProfileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {dialogPageType} from \"../../../Redux/DialogsReduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n/*\r\ntype PropsType = {\r\n    store: StoreType\r\n\r\n posts: Array<PostsType>\r\n dispatch: (action: ActionTypes) => void\r\n newPostText: string\r\nupdateNewPostText: (message: string) => void\r\naddPost: (message: string) => void*/\r\n/*export default function MyPostsContainer(/!*props: PropsType*!/) {\r\n\r\n\r\n    return (\r\n\r\n        <StoreContext.Consumer>\r\n            {\r\n            (store) => {\r\n                let state = store.getState()\r\n                let addPost = () => {\r\n                  store.dispatch(addPostActionCreator());\r\n                }\r\n\r\n                const onPostChange = (text: string) => {\r\n                   store.dispatch(updateNewPostTextActionCreator(text))\r\n                }\r\n\r\n           return     <MyPosts\r\n                    updateNewPostText={onPostChange}\r\n                    addPost={addPost}\r\n                    posts={state.profilePage.posts}\r\n                    newPostText={state.profilePage.newPostText}/>\r\n            }\r\n        }\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n   /* newPostText: string*/\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n   /* updateNewPostText: (text: string) => void*/\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n       /* newPostText: state.profilePage.newPostText*/\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch ): mapDispatchToPropsType => {\r\n    return {\r\n       /* updateNewPostText: (text: string) => {\r\n            dispatch((text))\r\n        },*/\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../Redux/ProfileReduser\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    updateStatus: boolean\r\n    profile: profileType\r\n    isOwner: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: any\r\n}\r\n\r\nexport default function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {getStatus, getUserProfile, profileType, savePhoto, saveProfile, updateStatus} from \"../../Redux/ProfileReduser\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n  }\r\n\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    authorizedUserId: string | number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null ) => void\r\n    getStatus: (userId: number | null)=> void\r\n    updateStatus: boolean\r\n    savePhoto: (files: FileList[number]) => string\r\n    saveProfile: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n    //  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}