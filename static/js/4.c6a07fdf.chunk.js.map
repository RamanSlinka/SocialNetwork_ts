{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","style","dialog","activeClassName","activeDialog","to","id","name","Message","h","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","styleCommon","textarea","component","Textarea","validate","required","placeholder","styleBtn","button","Dialogs","dialogsElements","dialogsPage","dialogs","map","messagesElements","messages","dialogsItem","textareaWrapper","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,aAAe,8BAA8B,SAAW,4B,gICQ1K,SAASC,EAAWC,GAC/B,OACI,qBAAKC,UAAWC,IAAMC,OAAtB,SACI,eAAC,IAAD,CAASC,gBAAiBF,IAAMG,aACvBC,GAAI,YAAcN,EAAMO,GADjC,cAEGP,EAAMQ,UCNN,SAASC,EAAQT,GAC5B,OACI,qBAAKC,UAAWS,IAAEC,QAAlB,SACKX,EAAMW,QAAQA,U,uCCmCrBC,EAAYC,YAAiB,IAmB7BC,EACFC,YAAoB,CAChBC,KAAM,wBADVD,EAlB0D,SAACf,GAC3D,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIlB,UAAWmB,IAAYC,SACvBC,UAAWC,IACXC,SAAU,CAACC,IAAUb,GACrBJ,KAAK,iBAAiBkB,YAAa,yBAE3C,8BACI,wBAAQzB,UAAW0B,IAASC,OAA5B,2BAWDC,EA1D6B,SAAC7B,GAEzC,IAAI8B,EAAkB9B,EAAM+B,YAAYC,QAAQC,KAAI,SAAA9B,GAAM,OACtD,cAACJ,EAAD,CAAYS,KAAML,EAAOK,KAAMD,GAAIJ,EAAOI,QAE1C2B,EAAmBlC,EAAM+B,YAAYI,SAASF,KAAI,SAAAtB,GAAO,OACzD,cAACF,EAAD,CAASE,QAASA,OAOtB,OACI,sBAAKV,UAAWC,IAAM8B,QAAtB,UACI,qBAAK/B,UAAWC,IAAMkC,YAAtB,SACKN,IAGL,qBAAK7B,UAAWC,IAAMmC,gBAAtB,SACI,cAACvB,EAAD,CAAqBG,SAXb,SAACqB,GACjBtC,EAAMuC,YAAYD,EAAOE,qBAYrB,qBAAKvC,UAAWC,IAAMiC,SAAtB,SACKD,Q,wCC1BbO,EAA6B,SAACC,GAAD,MAA6C,CAC1EC,OAAQD,EAAME,KAAKD,SCuBRE,sBACXC,aAdkB,SAACJ,GACnB,MAAO,CACHX,YAAaW,EAAMX,gBAGF,SAACgB,GACtB,MAAO,CACHR,YAAa,SAACC,GACVO,EAASC,YAAmBR,UDfjC,SAA+BS,GAclC,OAHsCH,YAAQL,EAARK,EATtC,SAA2B9C,GAA2B,IAE7C2C,EAAwB3C,EAAxB2C,OAAWO,EAFiC,YAEpBlD,EAFoB,YAIjD,OAAK2C,EACE,cAACM,EAAD,eAAeC,IADF,cAAC,IAAD,CAAU5C,GAAG,gBCc1BuC,CAGbhB","file":"static/js/4.c6a07fdf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__-XoJ6\",\"dialogsItem\":\"Dialogs_dialogsItem__3xAZH\",\"dialog\":\"Dialogs_dialog__3pRuV\",\"activeDialog\":\"Dialogs_activeDialog__2w-Gm\",\"messages\":\"Dialogs_messages__2avQL\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from '../Dialogs.module.scss'\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport default function DialogItem(props: DialogItemPropsType) {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink activeClassName={style.activeDialog}\r\n                     to={'/dialogs/' + props.id}\r\n            > {props.name}\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport { MessageType } from \"../../../Redux/DialogsReduser\";\r\nimport h from '../Dialogs.module.scss'\r\n\r\ntype MessagePropsType = {\r\n    message: MessageType\r\n}\r\n\r\nexport default function Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={h.message}>\r\n            {props.message.message}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport style from './Dialogs.module.scss';\r\nimport styleCommon from '../Common/SCSS/input.module.scss'\r\n import styleBtn from '../Common/SCSS/button.module.scss';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialog =>\r\n        <DialogItem name={dialog.name} id={dialog.id}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(message =>\r\n        <Message message={message}/>)\r\n\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItem}>\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={style.textareaWrapper}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesElements}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={styleCommon.textarea}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength]}\r\n                    name='newMessageBody' placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button className={styleBtn.button}> Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux =\r\n    reduxForm<FormType>({\r\n        form: 'dialogAddMessageForm'\r\n    })(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { ComponentType } from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n      isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>)   {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    let  ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport {dialogPageType, sendMessageCreator} from \"../../Redux/DialogsReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {withAuthRedirect} from \"../Hoc/withAuthRedirect\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: dialogPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType =\r\n    mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n"],"sourceRoot":""}